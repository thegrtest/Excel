import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import tkinter as tk
from tkinter import filedialog
import string
import datetime

# Converts Excel-style column letter (e.g. 'A') to zero-based index
def excel_col_to_index(letter):
    return string.ascii_uppercase.index(letter.upper())

# Load Excel data, clean, extract values, and resample
def load_and_process(cell_column='A', start_date='2025-02-21'):
    # File dialog to get Excel file path
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    if not file_path:
        print("No file selected.")
        return None

    try:
        df = pd.read_excel(file_path)
    except Exception as e:
        print(f"Failed to read Excel file: {e}")
        return None

    # Convert column letter to index and extract data
    try:
        column_index = excel_col_to_index(cell_column)
        data_series = df.iloc[:, column_index]
    except Exception as e:
        print(f"Error accessing column '{cell_column}': {e}")
        return None

    # Extract values using regex
    split_data = data_series.str.extract(
        r'(?P<Date>\d{4}-\d{2}-\d{2}) (?P<Time>\d{2}:\d{2}:\d{2});(?P<PH>[\d.]+);(?P<Temp>[\d.]+)'
    )

    # Convert data types
    split_data["Datetime"] = pd.to_datetime(split_data["Date"] + " " + split_data["Time"], errors='coerce')
    split_data["PH"] = pd.to_numeric(split_data["PH"], errors='coerce')

    # Drop invalid rows and filter from Feb 21st
    split_data.dropna(subset=["Datetime", "PH"], inplace=True)
    split_data = split_data[split_data["Datetime"] >= pd.to_datetime(start_date)]
    split_data.sort_values("Datetime", inplace=True)

    # Resample to 6 points per day (every 4 hours)
    split_data.set_index("Datetime", inplace=True)
    resampled = split_data.resample("4H").mean().dropna().reset_index()

    return resampled

# Plot a single week's data
def plot_weekly_data(data, week_start, week_end):
    weekly_data = data[(data["Datetime"] >= week_start) & (data["Datetime"] < week_end)]
    if weekly_data.empty:
        return

    fig, ax = plt.subplots(figsize=(14, 6))
    ax.plot(weekly_data["Datetime"], weekly_data["PH"], marker='o', linestyle='-', markersize=4, label="pH")

    # Green line at pH 7
    ax.axhline(y=7.0, color='green', linestyle='--', linewidth=1.5, label="Neutral pH (7.0)")

    # Day dividers
    for day in pd.to_datetime(weekly_data["Datetime"].dt.date.unique()):
        ax.axvline(x=day, color='gray', linestyle=':', linewidth=0.8)

    # X-axis label formatting
    ax.set_xticks(weekly_data["Datetime"])
    ax.set_xticklabels(
        [dt.strftime('%Y-%m-%d\n%H:%M') for dt in weekly_data["Datetime"]],
        rotation=90,
        fontsize=7
    )

    ax.set_title(f"pH Over Time: {week_start.date()} to {(week_end - datetime.timedelta(days=1)).date()}")
    ax.set_xlabel("Date and Time")
    ax.set_ylabel("pH Level")
    ax.grid(True)
    ax.legend()
    plt.tight_layout()
    plt.show()

# Loop through data week by week
def plot_all_weeks(data, start_date='2025-02-21'):
    start = pd.to_datetime(start_date)
    end = data["Datetime"].max()

    while start < end:
        week_end = start + pd.Timedelta(days=7)
        plot_weekly_data(data, start, week_end)
        start = week_end

# Run it
if __name__ == "__main__":
    df = load_and_process(cell_column='A', start_date='2025-02-21')
    if df is not None and not df.empty:
        plot_all_weeks(df, start_date='2025-02-21')
    else:
        print("No valid pH data found after Feb 21.")
