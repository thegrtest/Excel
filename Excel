import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import tkinter as tk
from tkinter import filedialog
import string
import datetime

def excel_col_to_index(letter):
    return string.ascii_uppercase.index(letter.upper())

def load_and_process(cell_column='A', start_date='2025-02-21'):
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    if not file_path:
        print("No file selected.")
        return None

    try:
        df = pd.read_excel(file_path)
    except Exception as e:
        print(f"Error reading Excel file: {e}")
        return None

    try:
        col_index = excel_col_to_index(cell_column)
        raw_col = df.iloc[:, col_index]
    except Exception as e:
        print(f"Error accessing column {cell_column}: {e}")
        return None

    # Extract components from the string
    extracted = raw_col.str.extract(
        r'(?P<Date>\d{4}-\d{2}-\d{2}) (?P<Time>\d{2}:\d{2}:\d{2});(?P<PH>[\d.]+);(?P<Temp>[\d.]+)'
    )

    # Convert to datetime and float
    try:
        extracted["Datetime"] = pd.to_datetime(extracted["Date"] + " " + extracted["Time"], errors="coerce")
        extracted["PH"] = pd.to_numeric(extracted["PH"], errors="coerce")
    except Exception as e:
        print(f"Conversion error: {e}")
        return None

    # Drop invalid rows
    extracted.dropna(subset=["Datetime", "PH"], inplace=True)

    # Filter starting from Feb 21
    extracted = extracted[extracted["Datetime"] >= pd.to_datetime(start_date)]
    extracted.sort_values("Datetime", inplace=True)

    if extracted.empty:
        print("Filtered data is empty after Feb 21.")
        return None

    # Downsample to 6 points per day (every 4 hours)
    try:
        extracted.set_index("Datetime", inplace=True)
        resampled = extracted.resample("4H").mean(numeric_only=True)
        resampled.dropna(subset=["PH"], inplace=True)
        resampled.reset_index(inplace=True)
    except Exception as e:
        print(f"Resampling error: {e}")
        return None

    return resampled

def plot_weekly_data(data, week_start, week_end):
    weekly_data = data[(data["Datetime"] >= week_start) & (data["Datetime"] < week_end)]
    if weekly_data.empty:
        return

    fig, ax = plt.subplots(figsize=(14, 6))
    ax.plot(weekly_data["Datetime"], weekly_data["PH"], marker='o', linestyle='-', label="pH", markersize=4)

    ax.axhline(y=7.0, color='green', linestyle='--', linewidth=1.5, label='Neutral pH (7.0)')

    for day in pd.to_datetime(weekly_data["Datetime"].dt.date.unique()):
        ax.axvline(x=day, color='gray', linestyle=':', linewidth=0.8)

    ax.set_xticks(weekly_data["Datetime"])
    ax.set_xticklabels(
        [dt.strftime('%Y-%m-%d\n%H:%M') for dt in weekly_data["Datetime"]],
        rotation=90,
        fontsize=7
    )

    ax.set_title(f"pH Over Time: {week_start.date()} to {(week_end - datetime.timedelta(days=1)).date()}")
    ax.set_xlabel("Date and Time")
    ax.set_ylabel("pH Level")
    ax.grid(True)
    ax.legend()
    plt.tight_layout()
    plt.show()

def plot_all_weeks(data, start_date='2025-02-21'):
    start = pd.to_datetime(start_date)
    end = data["Datetime"].max()

    while start < end:
        week_end = start + pd.Timedelta(days=7)
        plot_weekly_data(data, start, week_end)
        start = week_end

if __name__ == "__main__":
    df = load_and_process(cell_column='A', start_date='2025-02-21')
    if df is not None and not df.empty:
        print(f"Loaded and processed {len(df)} data points.")
        print(df.head())
        plot_all_weeks(df, start_date='2025-02-21')
    else:
        print("Data loading failed or returned empty result.")
