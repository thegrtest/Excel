import pandas as pd
import tkinter as tk
from tkinter import filedialog
import string

def excel_col_to_index(letter):
    return string.ascii_uppercase.index(letter.upper())

def load_and_process(sheet_name=0, cell_column='A', start_date='2025-02-21'):
    root = tk.Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    if not file_path:
        print("No file selected.")
        return None

    df = pd.read_excel(file_path, sheet_name=sheet_name)
    column_index = excel_col_to_index(cell_column)
    data_series = df.iloc[:, column_index]

    split_data = data_series.str.extract(
        r'(?P<Date>\d{4}-\d{2}-\d{2}) (?P<Time>\d{2}:\d{2}:\d{2});(?P<PH>[\d.]+);(?P<Temp>[\d.]+)'
    )

    # Convert and filter
    split_data["Datetime"] = pd.to_datetime(split_data["Date"] + " " + split_data["Time"])
    split_data["PH"] = pd.to_numeric(split_data["PH"], errors='coerce')
    split_data = split_data[split_data["Datetime"] >= pd.to_datetime(start_date)]
    split_data.sort_values("Datetime", inplace=True)
    split_data.reset_index(drop=True, inplace=True)

    return split_data

def find_largest_ph_drops(df, top_n=5):
    df["PH_Drop"] = df["PH"].diff()
    drops = df[df["PH_Drop"] < 0].copy()
    drops["Drop_Size"] = -drops["PH_Drop"]
    drops["Previous Time"] = df["Datetime"].shift(1)
    drops["Previous PH"] = df["PH"].shift(1)

    largest_drops = drops.nlargest(top_n, "Drop_Size")

    report = largest_drops[[
        "Previous Time", "Previous PH", "Datetime", "PH", "Drop_Size"
    ]].rename(columns={
        "Previous Time": "From Time",
        "Previous PH": "From pH",
        "Datetime": "To Time",
        "PH": "To pH",
        "Drop_Size": "pH Drop"
    })

    return report

def save_report(report_df):
    output_path = filedialog.asksaveasfilename(
        title="Save Report As",
        defaultextension=".xlsx",
        filetypes=[("Excel Files", "*.xlsx")]
    )
    if output_path:
        report_df.to_excel(output_path, index=False)
        print(f"Report saved to: {output_path}")
    else:
        print("No output file selected. Showing result:")
        print(report_df)

if __name__ == "__main__":
    df = load_and_process(cell_column='A', start_date='2025-02-21')
    if df is not None and not df.empty:
        report_df = find_largest_ph_drops(df, top_n=5)
        save_report(report_df)
    else:
        print("No valid data found after Feb 21.")
